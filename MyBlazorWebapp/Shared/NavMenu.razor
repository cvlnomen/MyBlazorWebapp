@using MyBlazorWebapp.StateObjects
@inject ProfileState ProfileState
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark">
	<div class="container-fluid">
		<a class="navbar-brand" href="">My Blazor Webapp</a>
		<button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
			<span class="navbar-toggler-icon"></span>
		</button>
	</div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
	<nav class="flex-column">
		<div class="nav-item px-3">
			<NavLink class="nav-link" href="" Match="NavLinkMatch.All">
				<span class="oi oi-home" aria-hidden="true"></span> Home
			</NavLink>
		</div>
		<div class="nav-item px-3">
			<NavLink class="nav-link" href="counter">
				<span class="oi oi-plus" aria-hidden="true"></span> Counter
			</NavLink>
		</div>
		<div class="nav-item px-3">
			<NavLink class="nav-link" href="fetchdata">
				<span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
			</NavLink>
		</div>
		<div class="nav-item px-3">
			<NavLink class="nav-link" href="formstate">
				<span class="oi oi-list-rich" aria-hidden="true"></span> State management
			</NavLink>
		</div>
		<div class="nav-item px-3" style="background: white">
			FirstName: @ProfileState.FirstName
			<br>
			LastName: @ProfileState.LastName
		</div>
	</nav>
</div>

@code {
	private bool _collapseNavMenu = true;

	private string? NavMenuCssClass => _collapseNavMenu ? "collapse" : null;

	private void ToggleNavMenu() => _collapseNavMenu = !_collapseNavMenu;

	private void OnFistNameStateChange(object? sender, EventArgs e) => StateHasChanged();

	private void OnLastNameStateChange(object? sender, EventArgs e) => StateHasChanged();

	protected override void OnInitialized()
	{
		ProfileState.StateChangedHandler += OnFistNameStateChange;
		ProfileState.StateChangedHandler += OnLastNameStateChange;
		base.OnInitialized();
	}

	/// <summary>
	/// Removes the event handlers from the ProfileState object to prevent a memory leak.
	/// </summary>
	void IDisposable.Dispose()
	{
		ProfileState.StateChangedHandler -= OnFistNameStateChange;
		ProfileState.StateChangedHandler -= OnLastNameStateChange;
	}

}